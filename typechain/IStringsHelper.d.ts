/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IStringsHelperInterface extends ethers.utils.Interface {
  functions: {
    "asHexString(uint256)": FunctionFragment;
    "asString(bytes32)": FunctionFragment;
    "base64Encode(string)": FunctionFragment;
    "dataURI(string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "asHexString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asString", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "base64Encode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dataURI",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "asHexString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asString", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "base64Encode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataURI", data: BytesLike): Result;

  events: {};
}

export class IStringsHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStringsHelperInterface;

  functions: {
    "asHexString(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "asHexString(uint256,uint256)"(
      value: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "asString(bytes32)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "asString(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "asString(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "base64Encode(string)"(
      input: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "base64Encode(bytes)"(
      input: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dataURI(
      mimeType: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dataURI(string,string)"(
      mimeType: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  "asHexString(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "asHexString(uint256,uint256)"(
    value: BigNumberish,
    length: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "asString(bytes32)"(
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "asString(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "asString(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "base64Encode(string)"(
    input: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "base64Encode(bytes)"(
    input: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dataURI(
    mimeType: string,
    data: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "dataURI(string,string)"(
    mimeType: string,
    data: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    "asHexString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "asHexString(uint256,uint256)"(
      value: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "asString(bytes32)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "asString(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "asString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "base64Encode(string)"(
      input: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "base64Encode(bytes)"(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    dataURI(
      mimeType: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "dataURI(string,string)"(
      mimeType: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    "asHexString(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "asHexString(uint256,uint256)"(
      value: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "asString(bytes32)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "asString(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "asString(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "base64Encode(string)"(
      input: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "base64Encode(bytes)"(
      input: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dataURI(
      mimeType: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dataURI(string,string)"(
      mimeType: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "asHexString(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "asHexString(uint256,uint256)"(
      value: BigNumberish,
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "asString(bytes32)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "asString(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "asString(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "base64Encode(string)"(
      input: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "base64Encode(bytes)"(
      input: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dataURI(
      mimeType: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dataURI(string,string)"(
      mimeType: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
